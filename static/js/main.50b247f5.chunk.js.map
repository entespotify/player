{"version":3,"sources":["components/AudioPlayer.js","components/SongList.js","components/Intro.js","components/TopNavigation.js","App.js","index.js"],"names":["AudioPlayer","props","useState","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","isFullScreen","setIsFullScreen","audioPlayer","useRef","progressBar","animationRef","useEffect","seconds","Math","floor","current","max","loadedmetadata","readyState","calculateTime","secs","minutes","returnedMinutes","returnedSeconds","whilePlaying","value","changePlayerCurrentTime","requestAnimationFrame","style","setProperty","SkipSong","forwards","setCurrentSongIndex","temp","currentSongIndex","songs","length","className","onClick","icon","faAngleDown","ref","src","track","preload","albumart","alt","title","artist","type","defaultValue","onChange","isNaN","faBackwardStep","prevValue","pause","cancelAnimationFrame","play","faPause","faPlay","faForwardStep","SongList","map","song","index","findIndex","i","displaySong","album","Intro","size","TopNavigation","href","App","setTracks","isLoading","setIsLoading","fetch","then","res","json","result","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50b247f5.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay, faPause, faForwardStep, faBackwardStep, faAngleDown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction AudioPlayer(props) {\r\n  // state\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [duration, setDuration] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [isFullScreen, setIsFullScreen] = useState(false);\r\n\r\n  // references\r\n  const audioPlayer = useRef();   // reference audio component\r\n  const progressBar = useRef();   // reference progress bar\r\n  const animationRef = useRef();  // reference the animation\r\n\r\n  useEffect(() => {\r\n    const seconds = Math.floor(audioPlayer.current.duration);\r\n    setDuration(seconds);\r\n    progressBar.current.max = seconds;\r\n  }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState]);\r\n\r\n  const calculateTime = (secs) => {\r\n    const minutes = Math.floor(secs / 60);\r\n    const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n    const seconds = Math.floor(secs % 60);\r\n    const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n    return `${returnedMinutes}:${returnedSeconds}`;\r\n  }\r\n\r\n  const togglePlayPause = () => {\r\n    const prevValue = isPlaying;\r\n    setIsPlaying(!prevValue);\r\n    if (!prevValue) {\r\n      audioPlayer.current.play();\r\n      animationRef.current = requestAnimationFrame(whilePlaying)\r\n    } else {\r\n      audioPlayer.current.pause();\r\n      cancelAnimationFrame(animationRef.current);\r\n    }\r\n  }\r\n\r\n  const whilePlaying = () => {\r\n    progressBar.current.value = audioPlayer.current.currentTime;\r\n    changePlayerCurrentTime();\r\n    animationRef.current = requestAnimationFrame(whilePlaying);\r\n  }\r\n\r\n  const changeRange = () => {\r\n    audioPlayer.current.currentTime = progressBar.current.value;\r\n    changePlayerCurrentTime();\r\n  }\r\n\r\n  const changePlayerCurrentTime = () => {\r\n    progressBar.current.style.setProperty('--seek-before-width', `${progressBar.current.value / duration * 100}%`)\r\n    setCurrentTime(progressBar.current.value);\r\n  }\r\n\r\n  const SkipSong = (forwards = true) => {\r\n    if (forwards) {\r\n        props.setCurrentSongIndex(() => {\r\n            let temp = props.currentSongIndex;\r\n            temp++;\r\n\r\n            if (temp > props.songs.length - 1) {\r\n                temp = 0;\r\n            }\r\n\r\n            return temp;\r\n        });\r\n    } else {\r\n        props.setCurrentSongIndex(() => {\r\n            let temp = props.currentSongIndex;\r\n            temp--;\r\n\r\n            if (temp < 0) {\r\n                temp = props.songs.length - 1;\r\n            }\r\n\r\n            return temp;\r\n        });\r\n    }\r\n}\r\n\r\n  return (\r\n    <div className={\"cmp-player \" + (isFullScreen ? 'cmp-player-full' : 'cmp-player-mini')}>\r\n        {isFullScreen ?\r\n\t\t<button className=\"cmp-angle-btn\" onClick={() => setIsFullScreen(false)}>\r\n\t\t\t<FontAwesomeIcon icon={faAngleDown} />\r\n\t\t</button> : null}\r\n        <audio ref={audioPlayer} src={props.songs[props.currentSongIndex].track} preload=\"metadata\"></audio>\r\n        <div className=\"cmp-player--details\" onClick={() => setIsFullScreen(true)}>\r\n            {isFullScreen ?   \r\n\t\t\t<div className=\"details-img\">\r\n\t\t\t\t<img src={props.songs[props.currentSongIndex].albumart} alt=\"Album Art\" />\r\n\t\t\t</div>: null }\r\n\t\t\t<p className=\"details-title\">{props.songs[props.currentSongIndex].title}</p>\r\n\t\t\t<p className=\"details-artist\">{props.songs[props.currentSongIndex].artist}</p>\r\n        </div>\r\n\r\n\t\t<div className={'cmp-player--progress-bar '+ (isFullScreen ? 'cmp-progress-bar-show' : 'cmp-progress-bar-hide')}>\r\n\t\t\t{/* progress bar */}\r\n\t\t\t<div className='cmp-progress-bar-container'>\r\n\t\t\t\t<input type=\"range\" className=\"cmp-progress-bar-bar progress-bar\" defaultValue=\"0\" ref={progressBar} onChange={changeRange} />\r\n\t\t\t</div>\r\n      <div className='cmp-progress-bar-timer'>\r\n        {/* current time */}\r\n        <div className=\"cmp-progress-bar-current-time cmp-progress-bar-text\">{calculateTime(currentTime)}</div>\r\n        {/* duration */}\r\n        <div className=\"cmp-progress-bar-duration cmp-progress-bar-text\">{(duration && !isNaN(duration)) && calculateTime(duration)}</div>\r\n      </div>\r\n\t\t</div>\r\n        \r\n\t\t<div className=\"cmp-player--controls\">\r\n\t\t\t{isFullScreen ?\r\n\t\t\t\t<button className=\"skip-btn\" onClick={() => SkipSong(false)}><FontAwesomeIcon icon={faBackwardStep} /></button>\r\n\t\t\t: null}\r\n\t\t\t<button onClick={togglePlayPause} className=\"play-btn\">\r\n\t\t\t\t{isPlaying ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}\r\n\t\t\t</button>\r\n\t\t\t{isFullScreen ?\r\n\t\t\t\t<button className=\"skip-btn\" onClick={() => SkipSong()}><FontAwesomeIcon icon={faForwardStep} /></button>\r\n\t\t\t: null}\r\n      \t</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AudioPlayer","import React, { useState } from 'react'\r\n// import Player from './Player';\r\nimport AudioPlayer from './AudioPlayer';\r\n\r\nfunction SongList(props) {\r\n    const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n\r\n    const displaySong = (title) => {\r\n        let index = props.songs.findIndex(i => i.title === title)\r\n        setCurrentSongIndex(index);\r\n    }\r\n\r\n    return (\r\n        <div className=\"cmp-song-list\">\r\n            <ul className=\"cmp-song-list-ul\"> {props.songs.map(song => (\r\n                <li className=\"cmp-song-list-item\" key={song.title} onClick={() => displaySong(song.title)}>\r\n                    <img className='cmp-song-list-img' src={song.albumart} alt=\"Mini album-art\" />\r\n                    <div className='cmp-song-list-text'>\r\n                        <span className='cmp-song-list-title'>{song.title}</span>\r\n                        <br />\r\n                        <span className='cmp-song-list-album'>{song.album}</span>\r\n                    </div>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n            {/* <Player\r\n                currentSongIndex={currentSongIndex}\r\n                setCurrentSongIndex={setCurrentSongIndex}\r\n                songs={props.songs}\r\n            /> */}\r\n            <AudioPlayer\r\n            currentSongIndex={currentSongIndex}\r\n            setCurrentSongIndex={setCurrentSongIndex}\r\n            songs={props.songs}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongList\r\n","import React from 'react'\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nfunction Intro() {\r\n    return (\r\n        <div className='cmp-loading'>\r\n            <ScaleLoader size={150} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Intro","import React from 'react'\r\n\r\nfunction TopNavigation() {\r\n  return (\r\n    <div className=\"cmp-navbar\">\r\n        <a className=\"cmp-navbar-title\" href=\"https://entespotify.github.io/reactive\">entespotify</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TopNavigation","import { useState, useEffect } from 'react';\r\nimport SongList from './components/SongList';\r\nimport Intro from './components/Intro';\r\nimport TopNavigation from './components/TopNavigation';\r\n\r\nfunction App() {\r\n\tconst [songs, setTracks] = useState([{ title: '', artist: '', album: '', albumart: '', track: '' }]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(\"https://hacksawrazor.pythonanywhere.com/tracks/\")\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(\r\n\t\t\t\t(result) => {\r\n\t\t\t\t\tsetTracks(result);\r\n\t\t\t\t\tsetIsLoading(false);\r\n\t\t\t\t},\r\n\t\t\t\t(error) => {\r\n\t\t\t\t\tsetTracks(\"Error\");\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<TopNavigation/>\r\n\t\t\t{isLoading ?\r\n\t\t\t\t<Intro />\r\n\t\t\t\t:\r\n\t\t\t\t<SongList songs={songs} />\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}